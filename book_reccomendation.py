# -*- coding: utf-8 -*-
"""Book Reccomendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NUtlfnU6EX1meH2Mq5plZhfeX1npjiNo
"""

import pandas as pd
import numpy as np

df_book=pd.read_csv("/content/Books.csv.zip")
df_rating=pd.read_csv("/content/Ratings.csv.zip")
df_user=pd.read_csv("/content/Users.csv.zip")

df_book.sample(5)

df_rating.sample(5)

df_user.sample(5)

print("Book-->",df_book.shape)
print("User-->",df_user.shape)
print("Rating-->",df_rating)

df_rating.isnull().sum()

df_user.isnull().sum()

df_book.isnull().sum()

df_book.drop(["Image-URL-L","Image-URL-S"],axis=1,inplace=True)

df_book.sample(5)

df_user.drop("Age",axis=1,inplace=True)

df_book["Book-Title"].sample(2)

df_merged_1=df_rating.merge(df_book,on="ISBN")

df_merged_1.sample(5)

df_merged_1['Book-Rating'] = pd.to_numeric(df_merged_1['Book-Rating'], errors='coerce')

df_merged_1['num_rating'] = df_merged_1.groupby('Book-Title')['Book-Rating'].transform('count')

df_merged_1['Avg_rating'] = df_merged_1.groupby('Book-Title')['Book-Rating'].transform('mean')

df_merged_1.sample(5).sort_values(by="Avg_rating",ascending=False)

popular_df=df_merged_1[df_merged_1['num_rating']>250].sort_values(by='Avg_rating',ascending=False).drop_duplicates('Book-Title').head(150)

popular_df

user_counts = df_merged_1.groupby('User-ID').count()
reliable_users_df = user_counts[user_counts['Book-Rating'] > 200]

user_id = reliable_users_df.index
users_df = df_merged_1[df_merged_1['User-ID'].isin(user_id)]

users_df.head()

x=users_df.groupby('Book-Title').count()['num_rating']>=50
famous=x[x].index

final_df=users_df[users_df['Book-Title'].isin(famous)]

final_df.head()

pivot_tb=final_df.pivot_table(index='Book-Title',columns='User-ID',values='Avg_rating')

pivot_tb

from sklearn.metrics.pairwise import cosine_similarity

pivot_tb.fillna(0,inplace=True)

sim_df=cosine_similarity(pivot_tb)

def recommend(book_name):
  if book_name not in pivot_tb.index:
    print(f"Book '{book_name}' not found in the recommendation list.")
    return

  index=np.where(pivot_tb.index==book_name)[0][0]
  similar_items=sorted(list(enumerate(sim_df[index])),key=lambda x:x[1],reverse=True)[1:10]

  for i in similar_items:
    print(pivot_tb.index[i[0]])

recommend("Harry Potter and the Prisoner of Azkaban (Book 3)")



import pickle

pickle.dump(popular_df,open('popular_df.pkl','wb'))

pickle.dump(pivot_tb,open("pivot_table.pkl",'wb'))

pickle.dump(sim_df,open('sim_score.pkl','wb'))

pickle.dump(df_book,open('books.pkl','wb'))